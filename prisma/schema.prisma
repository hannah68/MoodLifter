generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("DATABASE_SHADOW")
}

model User {
    id              Int       @id @default(autoincrement())
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    username        String    @unique
    email           String
    password        String    
    diaries         Diary[]
    feelings        FeelingOnUser[]
    favourite       Favourite?
}

model Favourite {
    id              Int       @id @default(autoincrement())
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    favPerson       String
    favPlace        String
    favFood         String
    gratitude       String
    passion         String
    accomplishment  String
    user            User     @relation(fields: [userId], references: [id])
    userId          Int
}

model Diary {
    id          Int       @id @default(autoincrement())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    diaryType   String
    text        String
    user        User      @relation(fields: [userId], references: [id])
    userId      Int
    feelings    FeelingOnDiary[]
}


model Feeling {
    id          Int       @id @default(autoincrement())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    name        String    @unique
    diaries     FeelingOnDiary[]
    users       FeelingOnUser[]
    quotes      Quote[]
    articles    Article[]
    videos      Video[]
    advices     Advice[]
}

model FeelingOnDiary {
    id          Int       @id @default(autoincrement())
    diary       Diary     @relation(fields: [diaryId], references: [id])
    diaryId     Int
    feeling     Feeling   @relation(fields: [feelingId], references: [id])
    feelingId   Int
}

model FeelingOnUser {
    id          Int       @id @default(autoincrement())
    user        User      @relation(fields: [userId], references: [id])
    userId      Int
    feeling     Feeling   @relation(fields: [feelingId], references: [id])
    feelingId   Int
}

model Article {
    id          Int       @id @default(autoincrement())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    articleType String
    title       String
    link        String
    content     String
    feeling     Feeling   @relation(fields: [feelingId], references: [id])
    feelingId   Int
}



model Video {
    id          Int       @id @default(autoincrement())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    videoType   String
    title       String
    link        String
    content     String
    feeling     Feeling   @relation(fields: [feelingId], references: [id])
    feelingId   Int
}



model Advice {
    id          Int       @id @default(autoincrement())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    adviceType  String
    text        String
    feeling     Feeling   @relation(fields: [feelingId], references: [id])
    feelingId   Int
}


model Quote {
    id          Int       @id @default(autoincrement())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    text        String
    author      String
    quoteType   String
    feeling     Feeling   @relation(fields: [feelingId], references: [id])
    feelingId   Int
}
